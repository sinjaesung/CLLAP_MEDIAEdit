<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>

        #canvasOutput{
            background-color:#808080
        }
        #imagesrc{
            outline:1px solid black; width:400px;height:400px;display:block;
        }
    </style>
</head>
<body>
<h2>HELLO OEPNCV.JS</h2>
<p id='status'>OPENCV IS JIS LOADING....</p>
<div>
    <p>Inputoutput</p>
    <button id='start' onclick="javascript:init_cv()">START</button>
    <div class='inputoutput'>
        <video id='video' width=320 height=240 alt='no image' src='resource/resource1.mp4' controls>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasinput</div>
        <canvas id='canvasinput1'></canvas>
        <canvas id='canvasinput2'></canvas>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasOutput</div>
        <canvas id='canvasOutput' width=320 height=240></canvas>
        <canvas id='canvasOutput2' width=320 height=240></canvas>
        <canvas id='canvasOutput3' width=320 height=240></canvas>
        <canvas id='canvasOutput4' width=320 height=240></canvas>
        
    </div>
</div>
<script>
let imgElement = document.getElementById('imagesrc');
let inputElement=document.getElementById('fileInput');
let video=document.getElementById('video');

let canvasinput1=document.getElementById('canvasinput1');
let canvasinput2=document.getElementById('canvasinput2');
let context1=canvasinput1.getContext('2d');
let canvasoutput = document.getElementById('canvasOutput');
let canvasoutput2 = document.getElementById('canvasOutput2');
let canvasoutput3 = document.getElementById('canvasOutput3');
let canvasoutput4 = document.getElementById('canvasOutput4');

let src;
let dst;
let cap;
function init_cv(){
    
    src=new cv.Mat(video.height,video.width,cv.CV_8UC4);
    dst=new cv.Mat(video.height,video.width,cv.CV_8UC1);
    cap=new cv.VideoCapture(video);

    cap.read(src);
    cv.imshow("canvasinput1",src);
    cv.imshow("canvasinput2",src);

    console.log('srcss:',src);
    console.log('dstss:',dst);
    console.log('capsss:',cap);

    //matrix test
    let mattzero=cv.Mat.zeros(5,5,cv.CV_8UC1);
    let mattones = cv.Mat.ones(5,5,cv.CV_8UC4);
    let matteyes = cv.Mat.eye(5,5,cv.CV_8UC4);
    let matt_arrays= cv.matFromArray(2,2,cv.CV_8UC1,[1,2,3,4]);

    let imgDatass=context1.getImageData(0,0,canvasinput1.width,canvasinput2.height);
    let mat_images=cv.matFromImageData(imgDatass);

    console.log('mattzero:',mattzero);
    console.log('mattones:',mattones);
    console.log('matteyess::',matteyes);
    console.log('matt_arrayss:',matt_arrays);

    console.log('imgDaatss:',imgDatass);
    console.log('mat_imagess:',mat_images);

    //processVideo();

    //clone
    let dst_target=src.clone();
    //copyto
    //src.copyTo(dst_target,mask);

    let matxxxx= new cv.Mat();
    let matVec = new cv.MatVector();
    matVec.push_back(matxxxx);
    let cnt=matVec.get(0);
    console.log('matVec:',matVec);
    console.log('matVec cntss:',cnt);

    //dataTypesss
    /*
    Data Properitess c++type  javascirpt yepaRray mattype
    data  uchar  Uint8array cv8u
    data8s  char  int8array cv8s
    data16u ushort  uint16array cv16u
    data16s short int16array cv16s
    dat32s  int int32array cv32s
    data32f float flaot32array cv32f
    data64f  double  float64array  cv64f
    */
   let rows=3,cols=4;

   let testcanvas=cv.imread(canvasinput1);
    
   console.log('testcanvas iscontinuss:',testcanvas,testcanvas.isContinuous());
   console.log('testcanvas cols,chaannelss,rowss:',testcanvas.cols,testcanvas.channels(),testcanvas.rows);
   if(testcanvas.isContinuous()){
       let R = testcanvas.data[rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()];
       let G = testcanvas.data[rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+1];
       let B = testcanvas.data[rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+2];
       let A = testcanvas.data[rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+3];      
       console.log('Rindex::',rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels());
       console.log('Gindex::',rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+1);
       console.log('Bindex::',rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+2);
       console.log('Aindex::',rows * testcanvas.cols * testcanvas.channels() + cols * testcanvas.channels()+3);
       console.log('R,G,B,A:',R,G,B,A);

       let R_= testcanvas.ucharAt(rows,cols*testcanvas.channels());
       let G_= testcanvas.ucharAt(rows,cols*testcanvas.channels()+1);
       let B_= testcanvas.ucharAt(rows,cols*testcanvas.channels()+2);
       let A_= testcanvas.ucharAt(rows,cols*testcanvas.channels()+3);
       console.log('R_,G_,B_,A_:',R_,G_,B_,A_);

       /*
        ucharPTR,charPtr,ushortPtr,shortPtr,intPtr,floatPtr,doublePtr cv8u,8s,16u,16s,32s,32f,64f

        ucharptr cv8u   unint8array
        charptr cv8s  int8array
        ushortptr cv16u  uint16array
        shortptr  cv16s  int16array
        intptr cv32s  int32array
        floatptr cv32f  float32array
        doubleptr cv64f  float64array
       */
       let pixel =testcanvas.ucharPtr(rows,cols);
       console.log('ptr whatsss addresss??:',pixel);

       //roi function usesss.....
       let dst_roi_local= new cv.Mat();
       let rect= new cv.Rect(50,50,100,60);//rect draw개체??사각형 개체 100,100이미지offset위치에서 200,200크기 range형태
       dst_roi_local = testcanvas.roi(rect);
       console.log('dst_roi_locas!!!!:',dst_roi_local);
       cv.imshow(canvasoutput,dst_roi_local);

       //spliting and mergine image chanenlsss...>>
       let rgbPlanes= new cv.MatVector();
       cv.split(testcanvas,rgbPlanes);
       //get R channel
       let Rchannel=rgbPlanes.get(0);
       let Gchannel=rgbPlanes.get(1);
       let Bchannel=rgbPlanes.get(2);

       console.log('Rchannelss:',Rchannel,Gchannel,Bchannel,testcanvas);
       //rgbPalnes가능???
       cv.imshow(canvasoutput,Rchannel);
       cv.imshow(canvasoutput2,Gchannel);
       cv.imshow(canvasoutput3,Bchannel);

       //image borderwidth
       let border_dst=new cv.Mat();
       let ssss=new cv.Scalar(35,140,160,255);//4*n꼴의 형태>>
       cv.copyMakeBorder(testcanvas,border_dst,20,20,20,20,cv.BORDER_WRAP,ssss);
       cv.imshow(canvasoutput4,border_dst);
   }
}
const FPS=30;
function processVideo(){
    try{
        let begin= Date.now();
        cap.read(src);
        //cv.cvtColor(src,dst,cv.COLOR_RGBA2GRAY);
        cv.imshow('canvasinput1',src);

        console.log('processing videoss:');
        console.log('capss::',cap);
        console.log('dst::',dst);
        console.log('srcss:',src);

        let delay=1000/FPS - (Date.now() - begin);
        console.log('delayss:',delay);

        setTimeout(processVideo,1000)
    }catch(error){
        console.log('errosss:',error);
    }
    
}

imgElement.onload = function() {
    console.log('imgElement자원요소가 모두 로드되었을시에::',cv);
    //let mat = cv.imread(imgElement);
    //cv.imshow('canvasOutput',mat);
    //console.log('imgshow mat elemtnssnso datasss:',mat);
    //mat.delete();
};
function onOpenCvReady(){
    document.getElementById('status').innerHTML ='OPENCV,.JS IS REaday';

    init_cv();
    //$('#start').click(init_cv);

}
</script>
<script async src='https://docs.opencv.org/3.4.0/opencv.js' onload='onOpenCvReady()'></script>
</body>
</html>