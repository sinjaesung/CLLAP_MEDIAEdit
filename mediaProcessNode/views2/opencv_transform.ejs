<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>

        canvas{
            background-color:#808080
        }
        #imagesrc{
            outline:1px solid black; width:400px;height:400px;display:block;
        }
    </style>
</head>
<body>
<h2>HELLO OEPNCV.JS</h2>
<p id='status'>OPENCV IS JIS LOADING....</p>
<div>
    <p>Inputoutput</p>
    <button id='start'>START</button>
    <div class='inputoutput'>
        <video id='video' width=320 height=240 alt='no image' src='resource/resource1.mp4' controls>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasinput</div>
        <canvas id='canvasinput1'></canvas>
        <canvas id='canvasinput2'></canvas>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasOutput</div>
        <canvas id='canvasOutput'></canvas>
        <canvas id='canvasOutput2'></canvas>
        <canvas id='canvasOutput3'></canvas>
        <canvas id='canvasOutput4'></canvas>
    </div>
</div>
<script>
let inputElement=document.getElementById('fileInput');
let video=document.getElementById('video');

let canvasinput1=document.getElementById('canvasinput1');
let canvasinput2=document.getElementById('canvasinput2');
let context1=canvasinput1.getContext('2d');

let canvasoutput1=document.getElementById('canvasOutput');
let canvasoutput2=document.getElementById('canvasOutput2');
let canvasoutput3=document.getElementById('canvasOutput3');
let canvasoutput4=document.getElementById('canvasOutput4');

let src;
let dst;
let cap;
function init_cv(){
    
    src=new cv.Mat(video.height,video.width,cv.CV_8UC4);
    dst=new cv.Mat(video.height,video.width,cv.CV_8UC1);
    cap=new cv.VideoCapture(video);

    //processVideo();
    cap.read(src);

    cv.imshow('canvasinput1',src);
    console.log('processing videoss:');
    console.log('capss::',cap);
    console.log('dst::',dst);
    console.log('srcss:',src);

    let src_local=cv.imread(canvasinput1);
    let dst_local=new cv.Mat();
    let M=cv.matFromArray(2,3,cv.CV_64FC1,[1,0,50,0,1,100]);
    let dsize= new cv.Size(src_local.rows,src_local.cols);

    cv.warpAffine(src_local,dst_local, M, dsize, cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput1,dst_local);
    src_local.delete();dst_local.delete();M.delete();

    let src_local2= cv.imread(canvasinput1);
    let dst_local2=new cv.Mat();
    let dsize2= new cv.Size(src_local2.rows,src_local2.cols);
    let centers= new cv.Point(src_local2.cols/2, src_local2.rows/2);

    let M2 = cv.getRotationMatrix2D(centers,45,1);
    cv.warpAffine(src_local2,dst_local2,M2,dsize2, cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput2,dst_local2);
    src_local2.delete(); dst_local2.delete(); M2.delete();

    let src_local3 = cv.imread(canvasinput1);
    let dst_local3 = new cv.Mat();
    let srcTri= cv.matFromArray(3,1,cv.CV_32FC2,[0,0,0,1,1,0]);
    let dstTri= cv.matFromArray(3,1,cv.CV_32FC2,[0.6,0.2,0.1,1.3,1.5,0.3]);
    let dsize3 = new cv.Size(src_local3.rows,src_local3.cols);
    let M3 = cv.getAffineTransform(srcTri,dstTri);

    cv.warpAffine(src_local3,dst_local3, M3, dsize3, cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput3,dst_local3);
    src_local3.delete();dst_local3.delete(); M3.delete(); srcTri.delete(); dstTri.delete();

    let src_local4 = cv.imread(canvasinput1);
    let dst_local4 = new cv.Mat();
    let dsize4 = new cv.Size(src_local4.rows,src_local4.cols);

    let srcTri4 = cv.matFromArray(4,1,cv.CV_32FC2,[56,65,368,52,28,387,389,390]);
    let dstTri4 = cv.matFromArray(4,1,cv.CV_32FC2,[0,0,500,0,0,500,500,500]);
    let M4 = cv.getPerspectiveTransform(srcTri4, dstTri4);

    cv.warpPerspective(src_local4, dst_local4, M4, dsize4, cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput4,dst_local4);
    src_local4.delete(); dst_local4.delete(); M4.delete(); srcTri4.delete(); dstTri4.delete();

}
const FPS=30;
function processVideo(){
    try{
        let begin= Date.now();
        cap.read(src);
        //cv.cvtColor(src,dst,cv.COLOR_RGBA2GRAY);
        cv.imshow('canvasinput1',src);

        console.log('processing videoss:');
        console.log('capss::',cap);
        console.log('dst::',dst);
        console.log('srcss:',src);

        let delay=1000/FPS - (Date.now() - begin);
        console.log('delayss:',delay);

        setTimeout(processVideo,1000)
    }catch(error){
        console.log('errosss:',error);
    }
    
}

function onOpenCvReady(){
    document.getElementById('status').innerHTML ='OPENCV,.JS IS REaday';
    document.getElementById('start').addEventListener('click',init_cv,false);
    init_cv();
}
</script>
<script async src='https://docs.opencv.org/3.4.0/opencv.js' onload='onOpenCvReady()'></script>
</body>
</html>