<html>
<head>
<script src='/public/ffmpegwasm.js'></script>
<style>
    html,body{
        margin:0; width:100%;height:100%
    }
    body{
        display:flex;flex-direction:column; align-items:center;
    }
</style>
</head>
<body>
   <h3>upload a vidoeo to transcode to mpo4 x264 and paly!!</h3>
   <video id='output-video' controls></video><br/>
   <input type='file' id='uploader' multiple>
   <button onClick='cancel()'>Cancel</button>
   <p id='message'></p>
    <script>
        const {createFFmpeg,fetchFile} = FFmpeg;
        const ffmpeg = createFFmpeg({ log: true });

        const transcode=async({target:{files}})=>{
            console.log('transacod efile changess filess>>:',files);
            const message=document.getElementById('message');
            message.innerHTML='Loading ffmpegt-core.js';
            await ffmpeg.load();
            message.innerHTML="Start concating";
            const inputPaths=[];
            for(const file of files){
                const {name} = file;
               // ffmpeg.FS('writeFile',name,await fetchFile(file));
                //inputPaths.push(`file ${name}`);
            }
            //ffmpeg.FS('writeFile','concat_list.txt',inputPaths.join('\n'));
            //ffmpeg.FS('writeFile',name,)
            //await ffmpeg.run('-f','concat','-i','concat_list.txt','-c','copy','output.mp4');
            //ffmpeg.FS('writeFile','output.mp4');
            //await ffmpeg.run('-i',`${await fetchFile(files[0])}`,'-i',`${await fetchFile(files[1])}`,'-filter_complex','"[0]settb=AVTB[v0];[1]settb=AVTB[v1];[v0][v1]xfade=transition=hrslice:duration=7:offset=16,format=yuv420p[outv]"','-vcodec','libx264','-map','[outv]','output.mp4');
             //await ffmpeg.run('-i','resource1.mp4','hahahahaha.mp4');
           //ffmpeg.FS('writeFile','resource1.mp4',await fetchFile(files[0]));
           //ffmpeg.FS('writeFile','resource2.mp4',await fetchFile(files[1]));//두개파일을 쓴다.
           ffmpeg.FS('writeFile','resource1.mp4',await fetchFile('resource/resource1.mp4'));
           ffmpeg.FS('writeFile','resource2.mp4',await fetchFile('resource/resource2.mp4'));
           //await ffmpeg.run('-i','resource1.mp4','-i','resource2.mp4','-filter_complex','"[0:v][0:a][1:v][1:a] concat=n=2:v=1:a=1 [outv] [outa]"','-map','"[outv]"','-map','"[outa]"','outputddffff.mp4');

          // await ffmpeg.run('-i','resource2.mp4','hmmm.mp4');
           //await ffmpeg.run('-i','output.mp4','output_final.mp4');
           //await ffmpeg.run('-i','resource1.mp4','-i','resource2.mp4','-filter_complex','hstack','hstackoutputss.mp4');
           await ffmpeg.run('-i','resource1.mp4','-i','resource2.mp4','-filter_complex','[0]settb=AVTB[v0];[1]settb=AVTB[v1];[v0][v1]xfade=transition=hrslice:duration=3:offset=18,format=yuv420p[outv]','-vcodec','libx264','-map','[outv]','outputhhhh.mp4');
            message.innerHTML='Complete Concating';
            const data=ffmpeg.FS('readFile','outputhhhh.mp4');
            const video =document.getElementById('output-video');
            video.src= URL.createObjectURL(
                new Blob([data.buffer],{
                    type:'video/mp4'
                })
            );
        };

     
        const elm = document.getElementById('uploader');
        elm.addEventListener('change',transcode);

        const cancel = () => {
            try{
                ffmpeg.exit();
            }catch(e){
                ffmpeg= null;
            }
        }
    </script>
</body>