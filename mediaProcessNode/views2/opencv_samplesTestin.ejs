<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>

        canvas{
            background-color:#808080
        }
        #imagesrc{
            outline:1px solid black; width:400px;height:400px;display:block;
        }
        
    </style>
</head>
<body>
<h2>HELLO OEPNCV.JS</h2>
<p id='status'>OPENCV IS JIS LOADING....</p>
<div>
    <p>Inputoutput</p>
    <button id='start' onclick="javascript:init_cv()">START</button>
    <div class='inputoutput'>
        <video id='video' width=320 height=240 alt='no image' src='resource/resource1.mp4' controls></video>
        <video id='video2' width=320 height=240 alt='no image' src='resource/resource2.mp4' controls></video>  
        <img id='logosource' width=200 height=150 src='public/sourceimg/test5.jpg'/>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasinput</div>
        <canvas id='canvasinput1'></canvas>
        <canvas id='canvasinput2'></canvas>
        <canvas id='canvasinput3'></canvas>
    </div>
    <div class='inputoutput'>
        <div class='caption'>canvasOutput</div>
        <canvas id='canvasOutput' width=320 height=240></canvas>
        <canvas id='canvasOutput2' width=320 height=240></canvas>
        <canvas id='canvasOutput3' width=320 height=240></canvas>

        <canvas id='canvasOutput4' width=600 height=600></canvas>
        <canvas id='canvasOutput5'></canvas>
        <canvas id='canvasOutput6'></canvas>
        <canvas id='canvasOutput7'></canvas>
        <canvas id='canvasOutput8'></canvas>
        <canvas id='canvasOutput9'></canvas>
    </div>
</div>
<script>
let imgElement = document.getElementById('imagesrc');
let inputElement=document.getElementById('fileInput');
let video=document.getElementById('video');
let video2=document.getElementById('video2');

let canvasinput1=document.getElementById('canvasinput1');
let canvasinput2=document.getElementById('canvasinput2');
let context1=canvasinput1.getContext('2d');
let canvasoutput = document.getElementById('canvasOutput');
let canvasoutput2 = document.getElementById('canvasOutput2');
let canvasoutput3 = document.getElementById('canvasOutput3');
let canvasoutput4 = document.getElementById('canvasOutput4');
let canvasoutput5 = document.getElementById('canvasOutput5');
let canvasoutput6 = document.getElementById('canvasOutput6');
let canvasoutput7 = document.getElementById('canvasOutput7');
let canvasoutput8 = document.getElementById('canvasOutput8');
let canvasoutput9 = document.getElementById('canvasOutput9');

let src;
let src2;
let logo_src=document.getElementById('logosource');
let dst;
let cap;
let cap2;
function init_cv(){
    
    src=new cv.Mat(video.height,video.width,cv.CV_8UC4);
    src2=new cv.Mat(video2.height,video2.width,cv.CV_8UC4);//a는없는.
    //logo_src=cv.imread(logo_src)
    dst=new cv.Mat(video.height,video.width,cv.CV_8UC1);
    cap=new cv.VideoCapture(video);
    cap2=new cv.VideoCapture(video2);

    cap.read(src);
    cap2.read(src2);

    cv.imshow("canvasinput1",src);
    cv.imshow("canvasinput2",src2);
    //cv.imshow("canvasinput3",logo_src);

   // console.log('logosrcsss:',logo_src);
    console.log('srcss:',src);
    console.log('dstss:',dst);
    console.log('capsss:',cap);

    let src1=cv.imread(canvasinput1);
    let dst_local=new cv.Mat();
    cv.cvtColor(src1,dst_local,cv.COLOR_BGRA2RGBA ,0);
    cv.imshow(canvasoutput,dst_local);

    //image inRange exampless
    let src2s=cv.imread(canvasinput2);
    let dst_locals=new cv.Mat();
    let low= new cv.Mat(src2s.rows,src2s.cols,src2s.type(),[0,0,0,0]);//검정색 완전투명
    let high = new cv.Mat(src2s.rows,src2s.cols,src2s.type(),[150,150,150,255]);//회색 불투명
    cv.inRange(src2s,low,high,dst_locals);
    cv.imshow(canvasoutput2,dst_locals);

    //imag transsformssss.>>>이 변형한 이미지의 자체의 ㅏ픽셀의 변홚형태임 삼차원적 변형은 아니고, 이차원적 픽셀의 변형일뿐임.픽셀일그러짐 그 일그러진 이차원 프레임이미지한장별로 이어붙였을시에 관련 영상으로 가능성 보임>>
    let srcs3s= cv.imread(canvasinput2);
    let dst_size=new cv.Mat();
    let dsize=new cv.Size(400,400);
    cv.resize(srcs3s,dst_size,dsize,0,0,cv.INTER_AREA);
    cv.imshow(canvasoutput3,dst_size);   

    let src4=cv.imread(canvasinput2);
    let dst_trans=new cv.Mat();
    let M=cv.matFromArray(2,3,cv.CV_64FC1,[1,0,10,0,1,10]);
    let dttsize=new cv.Size(src4.cols,src4.rows);
    cv.warpAffine(src4,dst_trans,M,dttsize,cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    console.log('translate whatssss:',dst_trans);
    cv.imshow(canvasoutput4,dst_trans);

    //rotation metrix
    let src5=cv.imread(canvasinput2);
    let dst_rotate=new cv.Mat();
    let dstsizes=new cv.Size(src5.cols,src5.rows);

    let center=new cv.Point(src5.cols / 2, src5.rows / 2);

    let Ms = cv.getRotationMatrix2D(center,45,1);
    cv.warpAffine(src5,dst_rotate,Ms,dstsizes,cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput5,dst_rotate);

    //affine transform distortion
    let src6= cv.imread(canvasinput2);
    let dst_distort=new cv.Mat();

    let srcTri=cv.matFromArray(3,1,cv.CV_32FC2,[0,0,0,1,1,0]);//0,0 / 0,1 /1,0 r,g채널만존재가능한가
    let dstTri=cv.matFromArray(3,1,cv.CV_32FC2,[0.6,0.2,0.1,1.3,1.5,0.3]);//float형태의 픽셀값
    console.log('srcTri,dstTris:',srcTri,dstTri);
    let dsttsize=new cv.Size(src6.cols,src6.rows);
    let Mss=cv.getAffineTransform(srcTri,dstTri);
    console.log('MSSS:',Mss);
    cv.warpAffine(src6,dst_distort,Mss,dsttsize,cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput6,dst_distort);

    //perspective transform go
    let src7 = cv.imread(canvasinput2);
    let dst_perspective = new cv.Mat();

    let dtosize= new cv.Size(src7.cols,src7.rows);
    let srcTro=cv.matFromArray(4,1,cv.CV_32FC2,[56,65,368,52,28,387,389,390]);
    let dstTro=cv.matFromArray(4,1,cv.CV_32FC2,[0,0,300,0,0,300,300,300]);
    console.log('srcTro,dstTro::',srcTro,dstTro);
    let Mgg=cv.getPerspectiveTransform(srcTro,dstTro);
    console.log('MGGG:',Mgg);
    cv.warpPerspective(src7,dst_perspective,Mgg,dtosize,cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar());
    cv.imshow(canvasoutput7,dst_perspective);
}
const FPS=30;
function processVideo(){
    try{
        let begin= Date.now();
        cap.read(src);
        //cv.cvtColor(src,dst,cv.COLOR_RGBA2GRAY);
        cv.imshow('canvasinput1',src);

        console.log('processing videoss:');
        console.log('capss::',cap);
        console.log('dst::',dst);
        console.log('srcss:',src);

        let delay=1000/FPS - (Date.now() - begin);
        console.log('delayss:',delay);

        setTimeout(processVideo,1000)
    }catch(error){
        console.log('errosss:',error);
    }
    
}

imgElement.onload = function() {
    console.log('imgElement자원요소가 모두 로드되었을시에::',cv);
    //let mat = cv.imread(imgElement);
    //cv.imshow('canvasOutput',mat);
    //console.log('imgshow mat elemtnssnso datasss:',mat);
    //mat.delete();
};
function onOpenCvReady(){
    document.getElementById('status').innerHTML ='OPENCV,.JS IS REaday';

    init_cv();
    //$('#start').click(init_cv);

}
</script>
<script async src='https://docs.opencv.org/3.4.0/opencv.js' onload='onOpenCvReady()'></script>
</body>
</html>